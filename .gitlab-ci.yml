# This file is a template, and might need editing before it works on your project.
image: golang:latest

variables:
  # Please edit to your GitLab project
  REPO_NAME: gitlab.com/yknomeh/gosh

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME
  - export PATH=$PATH:$GOPATH/bin
  - curl https://glide.sh/get | sh
  - glide update

stages:
    - setup
    - test
    - build


cache:
    untracked: true
    key: "$CI_BUILD_REF_NAME"
    paths:
      - vendor/


setup:
  stage: setup
  image: lwolf/golang-glide:0.12.3
  script:
    - glide install -v
  artifacts:
    paths:
      - vendor/

format:
    stage: test
    script:
      - go fmt $(go list ./... | grep -v /vendor/)
      - go vet $(go list ./... | grep -v /vendor/)
      - go test -race $(go list ./... | grep -v /vendor/)

build:
    stage: build
    image: lwolf/golang-glide:0.12.3
    script:
      - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o release/shell
      - cd release
    artifacts:
      paths:
        - release/
